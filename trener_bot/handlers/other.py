from aiogram import types, Dispatcher
from create_bot import bot
from services import *
from keyboards import kb_inline
from config import USER_ID


async def reminder():
    training_reminder_message = format_training_output(get_training_by_date(get_current_date()))
    # if training_reminder_message != '–°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç—É':
    await bot.send_message(USER_ID, '–ù–µ –∑–∞–±—É–¥—å, –¥—Ä—É–∂–æ–∫, —Å–µ–≥–æ–¥–Ω—è –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!')
    await bot.send_message(USER_ID, training_reminder_message)
    await bot.send_message(USER_ID, '–î–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å?', reply_markup=kb_inline)

async def ok_call(callback : types.CallbackQuery):
    if callback.data == 'ok':
        await callback.answer('–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –ø–æ–∑–∂–µ!', show_alert=True)
    elif callback.data == 'done':
        await callback.message.answer('üí™')
    await callback.message.delete()
    await callback.answer()

# @dp.message_handler()
async def main_handler(message : types.Message):
    # await message.answer(message.text)
    # await message.reply(message.text)
    if message.text == '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è':
        await bot.send_message(message.from_user.id, '–°–µ–≥–æ–¥–Ω—è, –¥—Ä—É–∂–æ–∫, —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å:')
        await bot.send_message(message.from_user.id, format_training_output(get_training_by_date(get_current_date())))
    elif message.text == '–°–ª–µ–¥—É—é—â–∞—è':
        await bot.send_message(message.from_user.id, format_training_output(get_next_training()))
    elif message.text == '–£–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ':
        await bot.send_message(message.from_user.id, format_output(get_workouts_done()))
    elif message.text == '–°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å':
        await bot.send_message(message.from_user.id, format_output(get_workouts_left()))

def register_handlers_other(dp : Dispatcher):
    dp.register_message_handler(main_handler)
    dp.register_callback_query_handler(ok_call)
